rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read all users for temporary initialization purposes
    match /users/{userId} {
      // Anyone can read user documents (this is a temporary fix)
      allow read: if true;
      
      // Only the authenticated user can write their own document
      allow write: if request.auth != null && 
                    (request.auth.uid == userId || 
                     userId == 'system_bot'); // Allow writing to system bot for initialization
    }
    
    // Chat rooms rules
    match /chatRooms/{roomId} {
      // Anyone can read public chat rooms
      allow read: if resource.data.isPublic == true || 
                     (request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]));
      
      // Allow joining public chat rooms by adding user to memberIds
      allow update: if request.auth != null && (
                     // Case 1: User is already a member and is updating the room
                     (resource.data.memberIds.hasAny([request.auth.uid]) &&
                      // Ensure critical fields aren't being modified by non-creator
                      (resource.data.creatorId == request.auth.uid || 
                       (request.resource.data.name == resource.data.name &&
                        request.resource.data.isPublic == resource.data.isPublic &&
                        request.resource.data.creatorId == resource.data.creatorId))) ||
                     
                     // Case 2: User is joining a public room (only adding themselves to memberIds)
                     (resource.data.isPublic == true &&
                      request.resource.data.memberIds.hasAll(resource.data.memberIds) &&
                      request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
                      request.resource.data.memberIds.hasAny([request.auth.uid]) &&
                      // Ensure no other fields are being modified when joining
                      request.resource.data.name == resource.data.name &&
                      request.resource.data.isPublic == resource.data.isPublic &&
                      request.resource.data.creatorId == resource.data.creatorId)
                   );
      
      // Only creator can create chat rooms
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.creatorId &&
                     request.resource.data.memberIds.hasAny([request.auth.uid]);
    }
    
    // Messages rules
    match /messages/{messageId} {
      // Anyone in the chat room can read messages
      allow read: if request.auth != null && 
                     get(/databases/$(database)/documents/chatRooms/$(resource.data.chatRoomId)).data.memberIds.hasAny([request.auth.uid]);
      
      // Anyone in the chat room can write messages
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.senderId &&
                       get(/databases/$(database)/documents/chatRooms/$(request.resource.data.chatRoomId)).data.memberIds.hasAny([request.auth.uid]);
                       
      // Only message sender can update their message
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.senderId;
    }
    
    // Default allow read for initialization purposes (temporary fix)
    match /{document=**} {
      allow read: if true;
      allow write: if false;
    }
  }
} 